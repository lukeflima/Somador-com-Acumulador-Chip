-- VHDL structural description generated from `sumaccdl_core_roteado_extra`
--		date : Thu Oct 26 10:42:23 2017


-- Entity Declaration

ENTITY sumaccdl_core_roteado_extra IS
  PORT (
  vss : linkage BIT ;	-- vss
  vdd : linkage BIT ;	-- vdd
  sel_1 : linkage BIT ;	-- sel_1
  sel_0 : linkage BIT ;	-- sel_0
  s : linkage BIT_VECTOR(3 DOWNTO 0) ;	-- s
  clk : linkage BIT ;	-- clk
  c_4 : linkage BIT ;	-- c_4
  a : linkage BIT_VECTOR(3 DOWNTO 0) 	-- a
  );
END sumaccdl_core_roteado_extra;

-- Architecture Declaration

ARCHITECTURE VST OF sumaccdl_core_roteado_extra IS
  COMPONENT mx3_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i2 : linkage BIT ;	-- i2
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT ;	-- i0
    cmd1 : linkage BIT ;	-- cmd1
    cmd0 : linkage BIT 	-- cmd0
    );
  END COMPONENT;

  COMPONENT mx2_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT ;	-- i0
    cmd : linkage BIT 	-- cmd
    );
  END COMPONENT;

  COMPONENT noa3ao322_x1
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    nq : linkage BIT ;	-- nq
    i6 : linkage BIT ;	-- i6
    i5 : linkage BIT ;	-- i5
    i4 : linkage BIT ;	-- i4
    i3 : linkage BIT ;	-- i3
    i2 : linkage BIT ;	-- i2
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT nxr2_x1
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    nq : linkage BIT ;	-- nq
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT a2_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT o2_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT inv_x4
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    nq : linkage BIT ;	-- nq
    i : linkage BIT 	-- i
    );
  END COMPONENT;

  COMPONENT sff1_x4
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i : linkage BIT ;	-- i
    ck : linkage BIT 	-- ck
    );
  END COMPONENT;

  COMPONENT oa2ao222_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i4 : linkage BIT ;	-- i4
    i3 : linkage BIT ;	-- i3
    i2 : linkage BIT ;	-- i2
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT oa2a22_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i3 : linkage BIT ;	-- i3
    i2 : linkage BIT ;	-- i2
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT xr2_x1
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT buf_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i : linkage BIT 	-- i
    );
  END COMPONENT;

  COMPONENT ao2o22_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    q : linkage BIT ;	-- q
    i3 : linkage BIT ;	-- i3
    i2 : linkage BIT ;	-- i2
    i1 : linkage BIT ;	-- i1
    i0 : linkage BIT 	-- i0
    );
  END COMPONENT;

  COMPONENT inv_x2
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    nq : linkage BIT ;	-- nq
    i : linkage BIT 	-- i
    );
  END COMPONENT;

  COMPONENT inv_x8
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT ;	-- vdd
    nq : linkage BIT ;	-- nq
    i : linkage BIT 	-- i
    );
  END COMPONENT;

  COMPONENT rowend_x0
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT 	-- vdd
    );
  END COMPONENT;

  COMPONENT tie_x0
    port (
    vss : linkage BIT ;	-- vss
    vdd : linkage BIT 	-- vdd
    );
  END COMPONENT;

  SIGNAL naoa_1 : BIT;	-- naoa 1
  SIGNAL naoa_2 : BIT;	-- naoa 2
  SIGNAL outsum_0 : BIT;	-- outsum 0
  SIGNAL adder_xr2_x1_sig : BIT;	-- adder.xr2_x1_sig
  SIGNAL outacc_0 : BIT;	-- outacc 0
  SIGNAL outmux0_0 : BIT;	-- outmux0 0
  SIGNAL naoa_0 : BIT;	-- naoa 0
  SIGNAL accumulator_rtlalc_0_0 : BIT;	-- accumulator.rtlalc_0 0
  SIGNAL outacc_1 : BIT;	-- outacc 1
  SIGNAL mux0_not_sel : BIT;	-- mux0.not_sel
  SIGNAL naoa_3 : BIT;	-- naoa 3
  SIGNAL accumulator_rtlalc_0_1 : BIT;	-- accumulator.rtlalc_0 1
  SIGNAL adder_not_aux3 : BIT;	-- adder.not_aux3
  SIGNAL adder_xr2_x1_2_sig : BIT;	-- adder.xr2_x1_2_sig
  SIGNAL adder_aux3 : BIT;	-- adder.aux3
  SIGNAL outsum_1 : BIT;	-- outsum 1
  SIGNAL adder_a2_x2_sig : BIT;	-- adder.a2_x2_sig
  SIGNAL adder_not_aux6 : BIT;	-- adder.not_aux6
  SIGNAL adder_inv_x2_sig : BIT;	-- adder.inv_x2_sig
  SIGNAL adder_not_aux4 : BIT;	-- adder.not_aux4
  SIGNAL adder_not_aux14 : BIT;	-- adder.not_aux14
  SIGNAL adder_o2_x2_sig : BIT;	-- adder.o2_x2_sig
  SIGNAL outmux0_1 : BIT;	-- outmux0 1
  SIGNAL adder_inv_x2_3_sig : BIT;	-- adder.inv_x2_3_sig
  SIGNAL adder_not_b_2 : BIT;	-- adder.not_b 2
  SIGNAL adder_not_b_1 : BIT;	-- adder.not_b 1
  SIGNAL adder_mx2_x2_sig : BIT;	-- adder.mx2_x2_sig
  SIGNAL adder_inv_x2_2_sig : BIT;	-- adder.inv_x2_2_sig
  SIGNAL adder_not_a_1 : BIT;	-- adder.not_a 1
  SIGNAL outsum_2 : BIT;	-- outsum 2
  SIGNAL outmux0_2 : BIT;	-- outmux0 2
  SIGNAL outacc_2 : BIT;	-- outacc 2
  SIGNAL adder_mx3_x2_sig : BIT;	-- adder.mx3_x2_sig
  SIGNAL accumulator_rtlalc_0_2 : BIT;	-- accumulator.rtlalc_0 2
  SIGNAL mux1_not_sel : BIT;	-- mux1.not_sel
  SIGNAL outsum_3 : BIT;	-- outsum 3
  SIGNAL outmux1_0 : BIT;	-- outmux1 0
  SIGNAL adder_aux13 : BIT;	-- adder.aux13
  SIGNAL outmux1_1 : BIT;	-- outmux1 1
  SIGNAL outmux1_2 : BIT;	-- outmux1 2
  SIGNAL accumulator_rtlalc_0_3 : BIT;	-- accumulator.rtlalc_0 3
  SIGNAL outacc_3 : BIT;	-- outacc 3
  SIGNAL adder_xr2_x1_3_sig : BIT;	-- adder.xr2_x1_3_sig
  SIGNAL outmux0_3 : BIT;	-- outmux0 3
  SIGNAL outmux1_3 : BIT;	-- outmux1 3

BEGIN

  bf_s_3_ins : buf_x2
    PORT MAP (
    i => outmux1_3,
    q => s(3),
    vdd => vdd,
    vss => vss);
  adder_xr2_x1_3_ins : xr2_x1
    PORT MAP (
    i0 => outmux0_3,
    i1 => outacc_3,
    q => adder_xr2_x1_3_sig,
    vdd => vdd,
    vss => vss);
  bf_s_2_ins : buf_x2
    PORT MAP (
    i => outmux1_2,
    q => s(2),
    vdd => vdd,
    vss => vss);
  accumulator_s_3_ins : buf_x2
    PORT MAP (
    i => accumulator_rtlalc_0_3,
    q => outacc_3,
    vdd => vdd,
    vss => vss);
  bf_s_1_ins : buf_x2
    PORT MAP (
    i => outmux1_1,
    q => s(1),
    vdd => vdd,
    vss => vss);
  accumulator_rtlalc_0_3_ins : sff1_x4
    PORT MAP (
    ck => clk,
    i => outmux1_3,
    q => accumulator_rtlalc_0_3,
    vdd => vdd,
    vss => vss);
  adder_cout_ins : oa2ao222_x2
    PORT MAP (
    i0 => outmux0_3,
    i1 => outacc_3,
    i2 => outacc_3,
    i3 => outmux0_3,
    i4 => adder_aux13,
    q => c_4,
    vdd => vdd,
    vss => vss);
  bf_s_0_ins : buf_x2
    PORT MAP (
    i => outmux1_0,
    q => s(0),
    vdd => vdd,
    vss => vss);
  adder_s_3_ins : xr2_x1
    PORT MAP (
    i0 => adder_aux13,
    i1 => adder_xr2_x1_3_sig,
    q => outsum_3,
    vdd => vdd,
    vss => vss);
  mux1_s_2_ins : ao2o22_x2
    PORT MAP (
    i0 => mux1_not_sel,
    i1 => outsum_2,
    i2 => sel_1,
    i3 => outmux0_2,
    q => outmux1_2,
    vdd => vdd,
    vss => vss);
  mux1_s_3_ins : oa2a22_x2
    PORT MAP (
    i0 => mux1_not_sel,
    i1 => outmux0_3,
    i2 => sel_1,
    i3 => outsum_3,
    q => outmux1_3,
    vdd => vdd,
    vss => vss);
  accumulator_rtlalc_0_2_ins : sff1_x4
    PORT MAP (
    ck => clk,
    i => outmux1_2,
    q => accumulator_rtlalc_0_2,
    vdd => vdd,
    vss => vss);
  accumulator_s_2_ins : buf_x2
    PORT MAP (
    i => accumulator_rtlalc_0_2,
    q => outacc_2,
    vdd => vdd,
    vss => vss);
  adder_s_2_ins : xr2_x1
    PORT MAP (
    i0 => adder_mx3_x2_sig,
    i1 => outmux0_2,
    q => outsum_2,
    vdd => vdd,
    vss => vss);
  adder_mx3_x2_ins : mx3_x2
    PORT MAP (
    cmd0 => adder_not_b_1,
    cmd1 => adder_not_a_1,
    i0 => adder_mx2_x2_sig,
    i1 => outacc_2,
    i2 => adder_inv_x2_2_sig,
    q => adder_mx3_x2_sig,
    vdd => vdd,
    vss => vss);
  adder_not_b_2_ins : inv_x2
    PORT MAP (
    i => outacc_2,
    nq => adder_not_b_2,
    vdd => vdd,
    vss => vss);
  adder_mx2_x2_ins : mx2_x2
    PORT MAP (
    cmd => outmux0_1,
    i0 => adder_inv_x2_3_sig,
    i1 => adder_not_b_2,
    q => adder_mx2_x2_sig,
    vdd => vdd,
    vss => vss);
  adder_inv_x2_3_ins : inv_x2
    PORT MAP (
    i => adder_not_aux14,
    nq => adder_inv_x2_3_sig,
    vdd => vdd,
    vss => vss);
  adder_aux13_ins : noa3ao322_x1
    PORT MAP (
    i0 => adder_o2_x2_sig,
    i1 => adder_not_aux4,
    i2 => adder_not_b_2,
    i3 => adder_not_aux6,
    i4 => adder_not_b_2,
    i5 => adder_a2_x2_sig,
    i6 => adder_inv_x2_sig,
    nq => adder_aux13,
    vdd => vdd,
    vss => vss);
  adder_o2_x2_ins : o2_x2
    PORT MAP (
    i0 => adder_not_b_1,
    i1 => adder_not_aux6,
    q => adder_o2_x2_sig,
    vdd => vdd,
    vss => vss);
  adder_inv_x2_2_ins : inv_x2
    PORT MAP (
    i => adder_not_aux14,
    nq => adder_inv_x2_2_sig,
    vdd => vdd,
    vss => vss);
  adder_a2_x2_ins : a2_x2
    PORT MAP (
    i0 => adder_not_b_1,
    i1 => adder_not_aux4,
    q => adder_a2_x2_sig,
    vdd => vdd,
    vss => vss);
  mux1_s_1_ins : ao2o22_x2
    PORT MAP (
    i0 => mux1_not_sel,
    i1 => outsum_1,
    i2 => sel_1,
    i3 => outmux0_1,
    q => outmux1_1,
    vdd => vdd,
    vss => vss);
  adder_s_1_ins : xr2_x1
    PORT MAP (
    i0 => adder_aux3,
    i1 => adder_xr2_x1_2_sig,
    q => outsum_1,
    vdd => vdd,
    vss => vss);
  adder_not_aux14_ins : nxr2_x1
    PORT MAP (
    i0 => adder_aux3,
    i1 => outacc_2,
    nq => adder_not_aux14,
    vdd => vdd,
    vss => vss);
  adder_not_a_1_ins : inv_x2
    PORT MAP (
    i => outmux0_1,
    nq => adder_not_a_1,
    vdd => vdd,
    vss => vss);
  adder_not_aux6_ins : a2_x2
    PORT MAP (
    i0 => adder_not_a_1,
    i1 => adder_not_aux3,
    q => adder_not_aux6,
    vdd => vdd,
    vss => vss);
  adder_inv_x2_ins : inv_x2
    PORT MAP (
    i => outmux0_2,
    nq => adder_inv_x2_sig,
    vdd => vdd,
    vss => vss);
  adder_not_aux4_ins : o2_x2
    PORT MAP (
    i0 => adder_not_a_1,
    i1 => adder_not_aux3,
    q => adder_not_aux4,
    vdd => vdd,
    vss => vss);
  accumulator_rtlalc_0_1_ins : sff1_x4
    PORT MAP (
    ck => clk,
    i => outmux1_1,
    q => accumulator_rtlalc_0_1,
    vdd => vdd,
    vss => vss);
  inversor_s_3_ins : inv_x2
    PORT MAP (
    i => a(3),
    nq => naoa_3,
    vdd => vdd,
    vss => vss);
  mux0_not_sel_ins : inv_x8
    PORT MAP (
    i => sel_0,
    nq => mux0_not_sel,
    vdd => vdd,
    vss => vss);
  adder_xr2_x1_2_ins : xr2_x1
    PORT MAP (
    i0 => outacc_1,
    i1 => outmux0_1,
    q => adder_xr2_x1_2_sig,
    vdd => vdd,
    vss => vss);
  mux0_s_3_ins : oa2a22_x2
    PORT MAP (
    i0 => mux0_not_sel,
    i1 => a(3),
    i2 => sel_0,
    i3 => naoa_3,
    q => outmux0_3,
    vdd => vdd,
    vss => vss);
  adder_not_aux3_ins : inv_x4
    PORT MAP (
    i => adder_aux3,
    nq => adder_not_aux3,
    vdd => vdd,
    vss => vss);
  accumulator_rtlalc_0_0_ins : sff1_x4
    PORT MAP (
    ck => clk,
    i => outmux1_0,
    q => accumulator_rtlalc_0_0,
    vdd => vdd,
    vss => vss);
  accumulator_s_1_ins : buf_x2
    PORT MAP (
    i => accumulator_rtlalc_0_1,
    q => outacc_1,
    vdd => vdd,
    vss => vss);
  adder_not_b_1_ins : inv_x2
    PORT MAP (
    i => outacc_1,
    nq => adder_not_b_1,
    vdd => vdd,
    vss => vss);
  mux0_s_0_ins : oa2a22_x2
    PORT MAP (
    i0 => mux0_not_sel,
    i1 => a(0),
    i2 => sel_0,
    i3 => naoa_0,
    q => outmux0_0,
    vdd => vdd,
    vss => vss);
  adder_aux3_ins : oa2ao222_x2
    PORT MAP (
    i0 => outmux0_0,
    i1 => outacc_0,
    i2 => outacc_0,
    i3 => outmux0_0,
    i4 => sel_0,
    q => adder_aux3,
    vdd => vdd,
    vss => vss);
  inversor_s_0_ins : inv_x2
    PORT MAP (
    i => a(0),
    nq => naoa_0,
    vdd => vdd,
    vss => vss);
  adder_s_0_ins : xr2_x1
    PORT MAP (
    i0 => adder_xr2_x1_sig,
    i1 => sel_0,
    q => outsum_0,
    vdd => vdd,
    vss => vss);
  mux1_s_0_ins : oa2a22_x2
    PORT MAP (
    i0 => mux1_not_sel,
    i1 => outmux0_0,
    i2 => sel_1,
    i3 => outsum_0,
    q => outmux1_0,
    vdd => vdd,
    vss => vss);
  adder_xr2_x1_ins : xr2_x1
    PORT MAP (
    i0 => outmux0_0,
    i1 => outacc_0,
    q => adder_xr2_x1_sig,
    vdd => vdd,
    vss => vss);
  accumulator_s_0_ins : buf_x2
    PORT MAP (
    i => accumulator_rtlalc_0_0,
    q => outacc_0,
    vdd => vdd,
    vss => vss);
  mux0_s_2_ins : ao2o22_x2
    PORT MAP (
    i0 => mux0_not_sel,
    i1 => naoa_2,
    i2 => sel_0,
    i3 => a(2),
    q => outmux0_2,
    vdd => vdd,
    vss => vss);
  mux0_s_1_ins : ao2o22_x2
    PORT MAP (
    i0 => mux0_not_sel,
    i1 => naoa_1,
    i2 => sel_0,
    i3 => a(1),
    q => outmux0_1,
    vdd => vdd,
    vss => vss);
  inversor_s_1_ins : inv_x2
    PORT MAP (
    i => a(1),
    nq => naoa_1,
    vdd => vdd,
    vss => vss);
  inversor_s_2_ins : inv_x2
    PORT MAP (
    i => a(2),
    nq => naoa_2,
    vdd => vdd,
    vss => vss);
  mux1_not_sel_ins : inv_x8
    PORT MAP (
    i => sel_1,
    nq => mux1_not_sel,
    vdd => vdd,
    vss => vss);
  tiex0_1 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_2 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_3 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_4 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_5 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_6 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_7 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_8 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_9 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_10 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_11 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_12 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_13 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_14 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_15 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_16 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_17 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_18 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_19 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_20 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_21 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_22 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  rowendx0_23 : rowend_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_24 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_25 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_26 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_27 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_28 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_29 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_30 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_31 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_32 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_33 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_34 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  rowendx0_35 : rowend_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_36 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_37 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);
  tiex0_38 : tie_x0
    PORT MAP (
    vdd => vdd,
    vss => vss);

end VST;
